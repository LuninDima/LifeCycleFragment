package com.example.lifecyclefragment

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import com.example.lifecyclefragment.databinding.ActivityMainBinding
/**
 *  * 2.09 Главное отличие жизненного цикла фрагмента от активити в том, что активити может существовать самостоятельно,
 * а фрагмент не может существовать без активити. Поэтому в жизненном цикле фрагмента добавлен метод onAttach для добавления
 * к активити и onDetach для открепления.
 * Помимо этого, backstack в активити реализован по принципу стека. Каждая новая активити помещается в стек поверх старой. При
 * нажатии на кнопку "назад" пользователь может вернуться на предыдущую активити в стеке. У фрагментов разработчик сам задает
 * данный порядок. Фрагмент может поместить вместо предыдущего фрагмента или добавиться поверх него. Во втором случае может
 * возникнуть ситуация, когда будут активны сразу 2 фрагмента. Одновременное исопльзование сразу 2-х активити возможно только
 * при разделении экрана на 2 части.
 *
 * 2.10 Жизненный цикл фрагмента необходим для грамотной работы устройства с множеством независимых приложений
 * в условиях ограниченного количества ресурсов. Использование методов жизненного цикла позволяет разработчику
 * управлять приложением в зависимости от действий пользователя: сохранять состояние и останавливать ресурсоемкие задачи при сворачивании приложения или его уничтожении,
 * восстанавливать данные при возврате пользователя к приложению и т.д.
 *
 * 2.11
 * 1) Сохранение данных при сворачивании приложения и их восстановление при возвращении пользователя на экра
 * 2) остановка ресурскоемких задач при сворачивании приложения
 * 3) сохранение данных в базу данных при уничтожении приложения*
 */
class MainActivity : AppCompatActivity() {
  private lateinit var binding: ActivityMainBinding
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        savedInstanceState.let {
            supportFragmentManager.beginTransaction()
                .replace(R.id.fragment_container, FirstFragment.newInstance())
                .commitAllowingStateLoss()
        }

    }
}